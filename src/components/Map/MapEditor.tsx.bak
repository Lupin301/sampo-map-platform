'use client';

import { useEffect, useRef, useState, useCallback } from 'react';
import mapboxgl from 'mapbox-gl';
import { MapData, SpotData, spotTypes } from '@/hooks/useFirestore';
import GooglePlacesSearch from './GooglePlacesSearch';
import SpotEditor from './SpotEditor';
import SpotList from './SpotList';
import Link from 'next/link';
import 'mapbox-gl/dist/mapbox-gl.css';

interface MapEditorProps {
  map: MapData;
  onUpdateMap: (mapData: Partial<MapData>) => Promise<void>;
  onAddSpot: (spotData: Omit<SpotData, 'id' | 'createdAt'>) => Promise<SpotData>;
  onUpdateSpot: (spotId: string, spotData: Partial<SpotData>) => Promise<void>;
  onDeleteSpot: (spotId: string) => Promise<void>;
}

export default function MapEditor({
  map,
  onUpdateMap,
  onAddSpot,
  onUpdateSpot,
  onDeleteSpot
}: MapEditorProps) {
  const mapContainer = useRef<HTMLDivElement>(null);
  const mapRef = useRef<mapboxgl.Map | null>(null);
  const markersRef = useRef<{ [key: string]: mapboxgl.Marker }>({});
  const [mapInitialized, setMapInitialized] = useState(false);
  
  const [loading, setLoading] = useState(true);
  const [editingSpot, setEditingSpot] = useState<SpotData | null>(null);
  const [showSpotEditor, setShowSpotEditor] = useState(false);
  const [clickCoordinates, setClickCoordinates] = useState<{ lat: number; lng: number } | null>(null);
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [mapError, setMapError] = useState<string | null>(null);
  
  // Âú∞Âõ≥Ë®≠ÂÆö„ÅÆÁ∑®ÈõÜÁä∂ÊÖã
  const [showMapSettings, setShowMapSettings] = useState(false);
  const [mapTitle, setMapTitle] = useState(map.title);
  const [mapDescription, setMapDescription] = useState(map.description);
  const [mapIsPublic, setMapIsPublic] = useState(map.isPublic);
  const [saveLoading, setSaveLoading] = useState(false);

  // Âú∞Âõ≥„ÅÆÂàùÊúüÂåñÔºà1Âõû„ÅÆ„Åø„ÄÅ‰æùÂ≠òÈÖçÂàó„Å™„ÅóÔºâ
  useEffect(() => {
    if (!mapContainer.current || mapInitialized) {
      return;
    }

    const accessToken = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;
    if (!accessToken) {
      setMapError('Mapbox„Ç¢„ÇØ„Çª„Çπ„Éà„Éº„ÇØ„É≥„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
      setLoading(false);
      return;
    }

    console.log('üó∫Ô∏è Initializing Mapbox (ONE TIME ONLY)');
    mapboxgl.accessToken = accessToken;

    const spots = map.spots || [];
    const center = spots.length > 0 
      ? [spots[0].coordinates.lng, spots[0].coordinates.lat] as [number, number]
      : [139.6917, 35.6895] as [number, number];

    try {
      setMapInitialized(true);
      
      mapRef.current = new mapboxgl.Map({
        container: mapContainer.current,
        style: 'mapbox://styles/mapbox/streets-v12',
        center,
        zoom: spots.length > 0 ? 12 : 10,
        antialias: true
      });

      // „Ç≥„É≥„Éà„É≠„Éº„É´„ÇíËøΩÂä†
      mapRef.current.addControl(new mapboxgl.NavigationControl(), 'bottom-right');
      mapRef.current.addControl(
        new mapboxgl.GeolocateControl({
          positionOptions: {
            enableHighAccuracy: true
          },
          trackUserLocation: true,
          showUserHeading: true
        }),
        'bottom-right'
      );

      // Âú∞Âõ≥„ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà
      mapRef.current.on('click', (e) => {
        const { lng, lat } = e.lngLat;
        console.log('üéØ Map clicked at:', { lat, lng });
        setClickCoordinates({ lat, lng });
        setEditingSpot(null);
        setShowSpotEditor(true);
      });

      // Âú∞Âõ≥Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü„Ç§„Éô„É≥„Éà
      mapRef.current.on('load', () => {
        console.log('‚úÖ Mapbox map loaded successfully (ONE TIME)');
        setLoading(false);
        setMapError(null);
        updateMarkers();
      });

      // „Ç®„É©„Éº„Ç§„Éô„É≥„Éà
      mapRef.current.on('error', (e) => {
        console.error('‚ùå Mapbox error:', e);
        setMapError('Âú∞Âõ≥„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        setLoading(false);
      });

    } catch (error: any) {
      console.error('‚ùå Error creating Mapbox map:', error);
      setMapError('Âú∞Âõ≥„ÅÆÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + error.message);
      setLoading(false);
      setMapInitialized(false);
    }

    // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÈñ¢Êï∞
    return () => {
      if (mapRef.current) {
        console.log('üßπ Cleaning up Mapbox map');
        mapRef.current.remove();
        mapRef.current = null;
      }
      setMapInitialized(false);
    };
  }, []); // Á©∫„ÅÆ‰æùÂ≠òÈÖçÂàó„Åß1Âõû„ÅÆ„ÅøÂÆüË°å

  // „Éû„ÉÉ„Éó„Éá„Éº„Çø„ÅåÊõ¥Êñ∞„Åï„Çå„ÅüÊôÇ„Å´Áä∂ÊÖã„ÇíÂêåÊúü
  useEffect(() => {
    setMapTitle(map.title);
    setMapDescription(map.description);
    setMapIsPublic(map.isPublic);
  }, [map.title, map.description, map.isPublic]);

  // „Éû„Éº„Ç´„ÉºÊõ¥Êñ∞Ôºà„Çπ„Éù„ÉÉ„ÉàÂ§âÊõ¥ÊôÇ„ÅÆ„ÅøÔºâ
  const updateMarkers = useCallback(() => {
    if (!mapRef.current || !mapRef.current.isStyleLoaded()) {
      console.log('‚è≥ Map not ready for markers, retrying...');
      setTimeout(updateMarkers, 100);
      return;
    }

    console.log('üîÑ Updating markers (NO MAP RELOAD). Total spots:', map.spots?.length || 0);

    const currentSpots = map.spots || [];
    
    // Êó¢Â≠ò„ÅÆ„Éû„Éº„Ç´„Éº„Çí„Åô„Åπ„Å¶ÂâäÈô§
    Object.values(markersRef.current).forEach(marker => {
      marker.remove();
    });
    markersRef.current = {};

    // Êñ∞„Åó„ÅÑ„Éû„Éº„Ç´„Éº„ÇíËøΩÂä†ÔºàÁï™Âè∑‰ªò„ÅçÔºâ
    currentSpots.forEach((spot, index) => {
      if (!spot.id) {
        console.log('‚ö†Ô∏è Spot without ID found:', spot);
        return;
      }

      const spotNumber = index + 1;
      console.log(`üìç Adding marker ${spotNumber} for spot: ${spot.name}`);

      const markerElement = document.createElement('div');
      markerElement.className = 'custom-marker';
      markerElement.innerHTML = `
        <div style="
          background: #3B82F6;
          border: 3px solid white;
          border-radius: 50%;
          width: 32px;
          height: 32px;
          cursor: pointer;
          box-shadow: 0 2px 4px rgba(0,0,0,0.3);
          display: flex;
          align-items: center;
          justify-content: center;
          color: white;
          font-weight: bold;
          font-size: 14px;
          font-family: system-ui, -apple-system, sans-serif;
          transition: transform 0.2s;
        " 
        onmouseover="this.style.transform='scale(1.1)'" 
        onmouseout="this.style.transform='scale(1)'"
        >${spotNumber}</div>
      `;

      try {
        const marker = new mapboxgl.Marker(markerElement)
          .setLngLat([spot.coordinates.lng, spot.coordinates.lat])
          .setPopup(
            new mapboxgl.Popup({ offset: 25 }).setHTML(`
              <div class="p-3">
                <div class="flex items-center mb-2">
                  <span class="inline-flex items-center justify-center w-6 h-6 bg-blue-600 text-white rounded-full text-sm font-bold mr-2">
                    ${spotNumber}
                  </span>
                  <h3 class="font-bold text-lg">${spot.name}</h3>
                </div>
                ${spot.description ? `<p class="text-sm text-gray-600 mb-2">${spot.description}</p>` : ''}
                ${spot.address ? `<p class="text-xs text-gray-500 mb-2">${spot.address}</p>` : ''}
                ${spot.rating ? `<div class="text-sm">Ë©ï‰æ°: ${spot.rating}/5</div>` : ''}
              </div>
            `)
          )
          .addTo(mapRef.current!);

        markerElement.addEventListener('click', (e) => {
          e.stopPropagation();
          setEditingSpot(spot);
          setClickCoordinates(null);
          setShowSpotEditor(true);
        });

        markersRef.current[spot.id] = marker;
      } catch (error) {
        console.error('‚ùå Error adding marker:', error);
      }
    });

    console.log('‚úÖ Markers updated (NO MAP RELOAD). Total markers:', Object.keys(markersRef.current).length);
  }, [map.spots]);

  // „Çπ„Éù„ÉÉ„Éà„ÅåÂ§âÊõ¥„Åï„Çå„ÅüÊôÇ„ÅÆ„Åø„Éû„Éº„Ç´„Éº„ÇíÊõ¥Êñ∞
  useEffect(() => {
    if (mapRef.current && mapRef.current.isStyleLoaded()) {
      updateMarkers();
    }
  }, [map.spots, updateMarkers]);

  const handleSaveMapSettings = async () => {
    setSaveLoading(true);
    try {
      await onUpdateMap({
        title: mapTitle,
        description: mapDescription,
        isPublic: mapIsPublic
      });
      
      setShowMapSettings(false);
      
      if (mapIsPublic) {
        alert('Âú∞Âõ≥Ë®≠ÂÆö„Çí‰øùÂ≠ò„Åó„ÄÅ„Éû„Éº„Ç±„ÉÉ„Éà„Éó„É¨„Ç§„Çπ„Å´ÂÖ¨Èñã„Åó„Åæ„Åó„ÅüÔºÅ');
      } else {
        alert('Âú∞Âõ≥Ë®≠ÂÆö„Çí‰øùÂ≠ò„Åó„Åæ„Åó„ÅüÔºàÈùûÂÖ¨ÈñãÔºâ');
      }
    } catch (error) {
      console.error('Âú∞Âõ≥Ë®≠ÂÆö‰øùÂ≠ò„Ç®„É©„Éº:', error);
      alert('‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    } finally {
      setSaveLoading(false);
    }
  };

  // Google PlacesÊ§úÁ¥¢„ÅßÂ†¥ÊâÄ„ÅåÈÅ∏Êäû„Åï„Çå„ÅüÊôÇ„ÅÆÂá¶ÁêÜÔºàÂú∞Âõ≥ÂÜçË™≠„ÅøËæº„Åø„Å™„ÅóÔºâ
  const handlePlaceSelect = useCallback(async (place: google.maps.places.PlaceResult) => {
    console.log('üéØ MapEditor - Place selected (NO MAP RELOAD):', place?.name);
    
    if (!place.geometry?.location) {
      console.log('‚ùå MapEditor - No geometry in place');
      return;
    }

    const lat = typeof place.geometry.location.lat === 'function' 
      ? place.geometry.location.lat() 
      : place.geometry.location.lat;
    const lng = typeof place.geometry.location.lng === 'function'
      ? place.geometry.location.lng()
      : place.geometry.location.lng;

    console.log('üìç MapEditor - Coordinates:', { lat, lng });

    const spotData = {
      name: place.name || 'Unknown Place',
      description: '',
      coordinates: { lat, lng },
      type: 'other',
      address: place.formatted_address || ''
    };

    try {
      console.log('üíæ MapEditor - Adding spot (NO MAP RELOAD)');
      const newSpot = await onAddSpot(spotData);
      console.log('‚úÖ MapEditor - Spot added successfully (NO MAP RELOAD):', newSpot);
      
      // Âú∞Âõ≥„ÇíÊñ∞„Åó„ÅÑ„Çπ„Éù„ÉÉ„Éà„Å´ÁßªÂãïÔºàÂú∞Âõ≥„ÅØÂÜçË™≠„ÅøËæº„Åø„Åó„Å™„ÅÑÔºâ
      if (mapRef.current && mapRef.current.isStyleLoaded()) {
        mapRef.current.flyTo({
          center: [lng, lat],
          zoom: 15,
          duration: 1000
        });
      }
    } catch (error) {
      console.error('‚ùå MapEditor - „Çπ„Éù„ÉÉ„ÉàËøΩÂä†„Ç®„É©„Éº:', error);
      alert('„Çπ„Éù„ÉÉ„Éà„ÅÆËøΩÂä†„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + (error as Error).message);
    }
  }, [onAddSpot]);

  // „Çπ„Éù„ÉÉ„Éà‰øùÂ≠òÂá¶ÁêÜ
  const handleSaveSpot = async (spotData: Omit<SpotData, 'id' | 'createdAt'>) => {
    try {
      if (editingSpot) {
        console.log('‚úèÔ∏è Updating spot:', editingSpot.id);
        await onUpdateSpot(editingSpot.id!, spotData);
      } else {
        console.log('‚ûï Adding new spot from manual input');
        await onAddSpot(spotData);
      }
      setShowSpotEditor(false);
      setEditingSpot(null);
      setClickCoordinates(null);
    } catch (error) {
      console.error('„Çπ„Éù„ÉÉ„Éà‰øùÂ≠ò„Ç®„É©„Éº:', error);
      alert('„Çπ„Éù„ÉÉ„Éà„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + (error as Error).message);
    }
  };

  // „Çπ„Éù„ÉÉ„ÉàÂâäÈô§Âá¶ÁêÜ
  const handleDeleteSpot = async (spotId: string) => {
    try {
      console.log('üóëÔ∏è Deleting spot:', spotId);
      await onDeleteSpot(spotId);
      setShowSpotEditor(false);
      setEditingSpot(null);
    } catch (error) {
      console.error('„Çπ„Éù„ÉÉ„ÉàÂâäÈô§„Ç®„É©„Éº:', error);
      alert('„Çπ„Éù„ÉÉ„Éà„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + (error as Error).message);
    }
  };

  // „Çπ„Éù„ÉÉ„Éà„ÇØ„É™„ÉÉ„ÇØÂá¶ÁêÜ
  const handleSpotClick = (spot: SpotData) => {
    if (mapRef.current && mapRef.current.isStyleLoaded()) {
      mapRef.current.flyTo({
        center: [spot.coordinates.lng, spot.coordinates.lat],
        zoom: 16,
        duration: 1000
      });
      
      const marker = markersRef.current[spot.id!];
      if (marker) {
        marker.getPopup().addTo(mapRef.current);
      }
    }
  };

  // Âú∞Âõ≥„ÅÆÂÜçË™≠„ÅøËæº„Åø
  const handleRetryMap = () => {
    setMapError(null);
    setLoading(true);
    setMapInitialized(false);
    
    // Êó¢Â≠ò„ÅÆÂú∞Âõ≥„ÇíÂâäÈô§
    if (mapRef.current) {
      mapRef.current.remove();
      mapRef.current = null;
    }
    
    // Â∞ë„ÅóÂæÖ„Å£„Å¶„Åã„ÇâÂÜçÂàùÊúüÂåñ
    setTimeout(() => {
      window.location.reload();
    }, 1000);
  };

  return (
    <div className="flex h-screen bg-gray-100">
      {/* „É¨„Çπ„Éù„É≥„Ç∑„Éñ„Çµ„Ç§„Éâ„Éê„Éº */}
      <div className={`bg-white shadow-lg transition-all duration-300 ${
        sidebarOpen ? 'w-80 md:w-80 sm:w-72' : 'w-0'
      } overflow-hidden flex flex-col`}>
        
        {/* „Çµ„Ç§„Éâ„Éê„Éº„Éò„ÉÉ„ÉÄ„ÉºÔºàÂõ∫ÂÆöÔºâ */}
        <div className="flex-shrink-0 p-4 border-b bg-blue-50">
          <div className="flex items-center justify-between mb-2">
            <h2 className="text-lg font-bold text-gray-900 truncate">{map.title}</h2>
            <button
              onClick={() => setShowMapSettings(true)}
              className="text-blue-600 hover:text-blue-700 text-sm"
            >
              Ë®≠ÂÆö
            </button>
          </div>
          <p className="text-sm text-gray-600 line-clamp-2">{map.description}</p>
          <div className="flex items-center justify-between mt-2 text-xs text-gray-500">
            <span className={map.isPublic ? 'text-green-600 font-medium' : 'text-orange-600 font-medium'}>
              {map.isPublic ? '‚úÖ ÂÖ¨Èñã‰∏≠' : 'üîí ÈùûÂÖ¨Èñã'}
            </span>
            <span>{map.spots?.length || 0} „Çπ„Éù„ÉÉ„Éà</span>
          </div>
        </div>
        
        {/* Ê§úÁ¥¢„Ç®„É™„Ç¢ÔºàÂõ∫ÂÆöÔºâ */}
        <div className="flex-shrink-0 p-4 border-b">
          <GooglePlacesSearch
            onPlaceSelect={handlePlaceSelect}
            placeholder="Â†¥ÊâÄ„ÇíÊ§úÁ¥¢„Åó„Å¶„Çπ„Éù„ÉÉ„Éà„ÇíËøΩÂä†..."
            className="w-full"
          />
          <p className="text-xs text-gray-500 mt-2">
            „Åæ„Åü„ÅØÂú∞Âõ≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„Çπ„Éù„ÉÉ„Éà„ÇíËøΩÂä†
          </p>
        </div>
        
        {/* „Çπ„Éù„ÉÉ„Éà„É™„Çπ„ÉàÔºà„Çπ„ÇØ„É≠„Éº„É´ÂèØËÉΩÔºâ */}
        <div className="flex-1 overflow-y-auto p-4">
          <SpotList
            spots={map.spots || []}
            onEditSpot={(spot) => {
              setEditingSpot(spot);
              setClickCoordinates(null);
              setShowSpotEditor(true);
            }}
            onDeleteSpot={handleDeleteSpot}
            onSpotClick={handleSpotClick}
          />
        </div>
      </div>

      {/* „É°„Ç§„É≥Âú∞Âõ≥„Ç®„É™„Ç¢ */}
      <div className="flex-1 relative">
        <div className="absolute top-4 left-4 right-4 z-10 flex justify-between items-center">
          <button
            onClick={() => setSidebarOpen(!sidebarOpen)}
            className="bg-white p-2 rounded-md shadow-md hover:bg-gray-50 transition-colors"
          >
            <span className="text-gray-600">
              {sidebarOpen ? '‚Üê' : '‚Üí'}
            </span>
          </button>

          <div className="flex space-x-2">
            <button
              onClick={() => setShowMapSettings(true)}
              className="bg-white px-3 py-2 rounded-md shadow-md hover:bg-gray-50 transition-colors text-sm hidden sm:block"
            >
              Âú∞Âõ≥Ë®≠ÂÆö
            </button>
            <Link
              href={`/maps/${map.id}`}
              className="bg-blue-600 text-white px-3 py-2 rounded-md shadow-md hover:bg-blue-700 transition-colors text-sm"
            >
              „Éó„É¨„Éì„É•„Éº
            </Link>
          </div>
        </div>

        <div 
          ref={mapContainer} 
          className="w-full h-full"
          style={{ minHeight: '400px' }}
        />
        
        {loading && (
          <div className="absolute inset-0 bg-gray-100 flex items-center justify-center">
            <div className="text-center">
              <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mb-2"></div>
              <div className="text-gray-600">Âú∞Âõ≥„ÇíË™≠„ÅøËæº„Åø‰∏≠...</div>
            </div>
          </div>
        )}

        {mapError && (
          <div className="absolute inset-0 bg-gray-100 flex items-center justify-center">
            <div className="text-center max-w-md mx-4">
              <div className="text-red-600 mb-4 text-sm">{mapError}</div>
              <div className="space-y-2">
                <button
                  onClick={handleRetryMap}
                  className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors"
                >
                  Âú∞Âõ≥„ÇíÂÜçË™≠„ÅøËæº„Åø
                </button>
                <div className="text-xs text-gray-500">
                  ÂïèÈ°å„ÅåÁ∂ö„ÅèÂ†¥Âêà„ÅØ„ÄÅ„Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø„Åó„Å¶„Åè„Å†„Åï„ÅÑ
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Âú∞Âõ≥Ë®≠ÂÆö„É¢„Éº„ÉÄ„É´ */}
        {showMapSettings && (
          <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center z-20">
            <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
              <h3 className="text-lg font-semibold mb-4">Âú∞Âõ≥Ë®≠ÂÆö</h3>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Âú∞Âõ≥„ÅÆ„Çø„Ç§„Éà„É´
                  </label>
                  <input
                    type="text"
                    value={mapTitle}
                    onChange={(e) => setMapTitle(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900 placeholder-gray-500"
                    placeholder="Âú∞Âõ≥„ÅÆ„Çø„Ç§„Éà„É´„ÇíÂÖ•Âäõ"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Ë™¨Êòé
                  </label>
                  <textarea
                    value={mapDescription}
                    onChange={(e) => setMapDescription(e.target.value)}
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900 placeholder-gray-500"
                    placeholder="„Åì„ÅÆÂú∞Âõ≥„Å´„Å§„ÅÑ„Å¶Ë™¨Êòé„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                  />
                </div>

                <div className="border-t pt-4">
                  <label className="flex items-start">
                    <input
                      type="checkbox"
                      checked={mapIsPublic}
                      onChange={(e) => setMapIsPublic(e.target.checked)}
                      className="mr-3 mt-1"
                    />
                    <div>
                      <span className="text-sm font-medium text-gray-700">
                        „Åì„ÅÆÂú∞Âõ≥„Çí„Éû„Éº„Ç±„ÉÉ„Éà„Éó„É¨„Ç§„Çπ„Å´ÂÖ¨Èñã„Åô„Çã
                      </span>
                      <p className="text-xs text-gray-500 mt-1">
                        ÂÖ¨Èñã„Åô„Çã„Å®„ÄÅ‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº„Åå„Åì„ÅÆÂú∞Âõ≥„ÇíÈñ≤Ë¶ß„Éª„ÅÑ„ÅÑ„Å≠„ÉªË≥ºÂÖ•„Åß„Åç„Çã„Çà„ÅÜ„Å´„Å™„Çä„Åæ„Åô
                      </p>
                    </div>
                  </label>
                </div>
              </div>

              <div className="flex space-x-2 mt-6">
                <button
                  onClick={() => setShowMapSettings(false)}
                  className="flex-1 bg-gray-500 text-white py-2 px-4 rounded-md hover:bg-gray-600 transition-colors"
                >
                  „Ç≠„É£„É≥„Çª„É´
                </button>
                <button
                  onClick={handleSaveMapSettings}
                  disabled={saveLoading}
                  className="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50 transition-colors"
                >
                  {saveLoading ? '‰øùÂ≠ò‰∏≠...' : (mapIsPublic ? 'ÂÖ¨Èñã„Åó„Å¶‰øùÂ≠ò' : '‰øùÂ≠ò')}
                </button>
              </div>
            </div>
          </div>
        )}

        {/* „Çπ„Éù„ÉÉ„Éà„Ç®„Éá„Ç£„Çø„Éº„É¢„Éº„ÉÄ„É´ */}
        {showSpotEditor && (
          <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center z-20 p-4">
            <SpotEditor
              spot={editingSpot}
              coordinates={clickCoordinates}
              onSave={handleSaveSpot}
              onCancel={() => {
                setShowSpotEditor(false);
                setEditingSpot(null);
                setClickCoordinates(null);
              }}
              onDelete={editingSpot ? () => handleDeleteSpot(editingSpot.id!) : undefined}
            />
          </div>
        )}
      </div>
    </div>
  );
}
