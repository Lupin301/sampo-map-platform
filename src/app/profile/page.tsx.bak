'use client';

import { useAuth } from '@/hooks/useAuth';
import { useProfile } from '@/hooks/useProfile';
import { useState } from 'react';
import { useRouter } from 'next/navigation';

export default function ProfilePage() {
  const [isEditing, setIsEditing] = useState(false);
  const [editForm, setEditForm] = useState({
    displayName: '',
    bio: ''
  });
  const router = useRouter();

  // 仮のユーザーデータ
  const user = { email: 'test@example.com' };
  const profile = { displayName: 'テストユーザー', bio: 'これは仮のプロフィールです' };

  // 編集モード開始
  const handleEditStart = () => {
    setEditForm({
      displayName: profile?.displayName || '',
      bio: profile?.bio || ''
    });
    setIsEditing(true);
  };

  // 編集保存
  const handleEditSave = async () => {
    try {
      // TODO: 実際の更新処理を実装
      console.log('プロフィール更新:', editForm);
      setIsEditing(false);
    } catch (error) {
      console.error('プロフィール更新エラー:', error);
    }
  };

  // 編集キャンセル
  const handleEditCancel = () => {
    setIsEditing(false);
    setEditForm({
      displayName: '',
      bio: ''
    });
  };

  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl">
      {/* ページヘッダー */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">マイページ</h1>
        <p className="text-gray-600">プロフィール情報を管理できます</p>
      </div>

      {/* プロフィールカード */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
        <div className="flex items-start justify-between mb-6">
          <h2 className="text-xl font-semibold text-gray-900">プロフィール情報</h2>
          {!isEditing && (
            <button
              onClick={handleEditStart}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
            >
              編集
            </button>
          )}
        </div>

        {/* プロフィール表示/編集フォーム */}
        <div className="space-y-6">
          {/* プロフィール画像 */}
          <div className="flex items-center space-x-4">
            <div className="w-20 h-20 bg-gray-300 rounded-full flex items-center justify-center">
              {profile?.photoURL ? (
                <img
                  src={profile.photoURL}
                  alt="プロフィール"
                  className="w-full h-full rounded-full object-cover"
                />
              ) : (
                <span className="text-gray-600 text-2xl">
                  {profile?.displayName?.charAt(0) || user.email?.charAt(0) || '?'}
                </span>
              )}
            </div>
            <div>
              <h3 className="font-medium text-gray-900">{profile?.displayName || 'ユーザー'}</h3>
              <p className="text-sm text-gray-500">{user.email}</p>
            </div>
          </div>

          {/* 表示名 */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              表示名
            </label>
            {isEditing ? (
              <input
                type="text"
                value={editForm.displayName}
                onChange={(e) => setEditForm({ ...editForm, displayName: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="表示名を入力"
              />
            ) : (
              <p className="text-gray-900">{profile?.displayName || '未設定'}</p>
            )}
          </div>

          {/* 自己紹介 */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              自己紹介
            </label>
            {isEditing ? (
              <textarea
                value={editForm.bio}
                onChange={(e) => setEditForm({ ...editForm, bio: e.target.value })}
                rows={4}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="自己紹介を入力"
              />
            ) : (
              <p className="text-gray-900 whitespace-pre-wrap">{profile?.bio || '未設定'}</p>
            )}
          </div>

          {/* 編集ボタン */}
          {isEditing && (
            <div className="flex space-x-3">
              <button
                onClick={handleEditSave}
                className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors"
              >
                保存
              </button>
              <button
                onClick={handleEditCancel}
                className="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400 transition-colors"
              >
                キャンセル
              </button>
            </div>
          )}
        </div>
      </div>

      {/* 統計情報 */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-2">作成した地図</h3>
          <p className="text-3xl font-bold text-blue-600">-</p>
          <p className="text-sm text-gray-500 mt-1">準備中</p>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-2">お気に入り</h3>
          <p className="text-3xl font-bold text-green-600">-</p>
          <p className="text-sm text-gray-500 mt-1">準備中</p>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-2">総閲覧数</h3>
          <p className="text-3xl font-bold text-purple-600">-</p>
          <p className="text-sm text-gray-500 mt-1">準備中</p>
        </div>
      </div>
    </div>
  );
}