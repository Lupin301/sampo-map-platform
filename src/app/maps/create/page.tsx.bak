'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/contexts/AuthContext';
import { useFirestore } from '@/hooks/useFirestore';
import Header from '@/components/Header';

export default function CreateMapPage() {
  const { user } = useAuth();
  const router = useRouter();
  const { createMap } = useFirestore();
  
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [isPublic, setIsPublic] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!user) {
      setError('ログインが必要です');
      return;
    }

    if (!title.trim()) {
      setError('タイトルを入力してください');
      return;
    }

    if (!description.trim()) {
      setError('説明を入力してください');
      return;
    }

    setLoading(true);
    setError('');
    
    try {
      const mapId = await createMap({
        title: title.trim(),
        description: description.trim(),
        isPublic,
        spots: []
      });
      
      // 作成成功後、編集ページにリダイレクト
      router.push(`/maps/${mapId}/edit`);
    } catch (error: any) {
      console.error('地図作成エラー:', error);
      setError(error.message || '地図の作成に失敗しました');
    } finally {
      setLoading(false);
    }
  };

  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Header />
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center">
            <h1 className="text-2xl font-bold text-gray-900 mb-4">
              ログインが必要です
            </h1>
            <p className="text-gray-600">
              地図を作成するにはログインしてください。
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      
      <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="bg-white rounded-lg shadow-sm border p-6 sm:p-8">
          <h1 className="text-2xl sm:text-3xl font-bold text-gray-900 mb-6">
            新しい地図を作成
          </h1>
          
          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                地図のタイトル <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900 placeholder-gray-500"
                placeholder="例：渋谷のおしゃれカフェ巡り"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                説明
<span className="text-red-500">*</span>
             </label>
             <textarea
               value={description}
               onChange={(e) => setDescription(e.target.value)}
               rows={4}
               className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900 placeholder-gray-500"
               placeholder="この地図について詳しく説明してください。どんな場所を紹介するか、誰におすすめかなど..."
               required
             />
           </div>

           <div>
             <label className="flex items-center">
               <input
                 type="checkbox"
                 checked={isPublic}
                 onChange={(e) => setIsPublic(e.target.checked)}
                 className="mr-2 text-blue-600 focus:ring-blue-500"
               />
               <span className="text-sm text-gray-700">
                 この地図を公開する（他のユーザーが閲覧可能）
               </span>
             </label>
             <p className="text-xs text-gray-500 mt-1">
               後からでも変更できます
             </p>
           </div>

           {error && (
             <div className="text-red-600 text-sm bg-red-50 p-3 rounded-md">
               {error}
             </div>
           )}

           <div className="flex space-x-4">
             <button
               type="button"
               onClick={() => router.back()}
               className="flex-1 bg-gray-500 text-white py-3 px-4 rounded-md hover:bg-gray-600 transition-colors"
             >
               キャンセル
             </button>
             <button
               type="submit"
               disabled={loading}
               className="flex-1 bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50 transition-colors"
             >
               {loading ? '作成中...' : '地図を作成'}
             </button>
           </div>
         </form>
       </div>
     </div>
   </div>
 );
}
